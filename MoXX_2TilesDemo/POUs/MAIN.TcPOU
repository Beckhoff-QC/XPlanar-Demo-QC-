<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.11">
  <POU Name="MAIN" Id="{7d4ff9b1-a8bc-4250-9226-bef726560f62}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	// button
	IbSwitch		AT%I*	: BOOL;
	IbSwitchRestart	AT%I*	: BOOL;
	ObLamp			AT%Q*	: BOOL;	
	fbBlinker				: FB_Blinker;
	tcRestart 				: TC_Restart;

	nState 					: INT;
	mover					: ARRAY[1..2] OF FB_MoverApplication;
	ipMover					: ARRAY[1..2] OF I_MoverApplication;
	_ipMover				: ARRAY[1..2] OF I_MoverApplication;	
	cmdFb					: MC_PlanarFeedback;
	TargetPos				: PositionXYC;
	StartPos				: ARRAY[1..2] OF PositionXYC;
	Track8					: FB_TrackStandard;
	nStateTrackInit 		: INT;
	pstart					: REFERENCE TO PositionXYC;
	pend					: REFERENCE TO PositionXYC;
	pposition				: REFERENCE TO PositionXYC;
	start					: PositionXYC;
	end						: PositionXYC;
	position				: PositionXYC;
	
	
	
	// pattern Eight
	
	fSpeedEight 			: LREAL := 750;
	nCntEights				: INT;
	
	// Pattern Print
	nCnt					: INT;
	nStateP_Print			: INT;
	fYPos					: LREAL;
	
	// Pattern Rotation
	fCTargetPos				: LREAL;
	fRotCnt					: INT := 0;
	stMoveCOptions			: ST_MoveCOptions;
	stMoveCOptions2			: ST_MoveCOptions;
	nStateP_Rotation		: INT;
	
	// EIGHT
	StartPosEight			: ARRAY[1..2] OF PositionXYC;
	nStateP_Eight			: INT;
	
	// Pattern tilt
	nStateP_Tilt			: INT;
	
	
	// log
	fbWriteLog				: FB_WriteLog;
	tonTimer				: TON;
	nStateLog				: INT;
	stDiagData				: ST_CoeDriveDiagData;
	TilePower 				: UINT;
	nTemp1 					: UINT;
	nTemp2 					: UINT;
	nTemp3 					: UINT;
	nTemp4 					: UINT;
	nTemp5 					: UINT;
	//utility
	fbEnvironment			: FB_TcIoXPlanarEnvironment;
	ipXpu					: I_TcIoXPlanarProcessingUnit;
	fbXPlanarUtilityVisu	: FB_XPlanarUtilityVisu;
	nStateInitXpu			: INT;
	
	
	fPosX					: LREAL;
	fPosY					: LREAL;
	_Position				: PositionXYC;
	fTrackPos				: LREAL;
	fTrackLength			: LREAL;
	
	//shutdown
	fbDelay					:TON;	
	fbShutdown				:NT_SHUTDOWN;
	tDelay					:TIME := T#3000MS;
	bStartShutdown			:BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[mover[1].Cycle();
mover[2].Cycle();
//ObLamp :=  IbSwitch;

fbBlinker(
	bStart 			:= (nstate > 10),
	tTurnOffDelay 	:= T#750MS,
	tTurnOnDelay	:= T#750MS,
	bLed			=> ObLamp);

actShutdown();

tcRestart(
	NETID:= , 
	RESTART:= IbSwitchRestart AND NOT bStartShutdown, 
	TMOUT:= , 
	BUSY=> , 
	ERR=> , 
	ERRID=> );

CASE nstate OF
	
-10:
	mover[1].std.Disable('');
	mover[2].std.Disable('');
	nstate := -9;	
	
-9:
	IF IbSwitch THEN
		nstate := 0;
	END_IF	

-2:
	mover[1].std.Reset('');
	mover[2].std.Reset('');
	nstate := -1;
-1:
	IF 	mover[1].std.P_Reset.Done
		AND mover[2].std.P_Reset.Done  THEN
		//nstate := 0;
	END_IF

0:
	IF IbSwitch THEN
		nstate := 1;
	END_IF
1:
	mover[1].std.Enable('');
	mover[2].std.Enable('');
	nstate := 2;
2:
	IF mover[1].std.P_Enable.Done
		AND mover[2].std.P_Enable.Done THEN
		nstate := 5;
	END_IF


5:
	IF mover[1].std.P_ActPosition.y < mover[2].std.P_ActPosition.y THEN
		ipMover[1] := mover[1];	
		ipMover[2] := mover[2];	
	ELSE
		ipMover[1] := mover[2];	
		ipMover[2] := mover[1];	
	END_IF
	nstate := 10;
	
10:
	StartPos[1].SetValuesXYC(120,120,0);
	StartPos[2].SetValuesXYC(120,360,0);
	nstate := 12;
	
	
12:

		nstate := 13;

13:
	Mover[1].std.MoveZ('',2.0,10,1000,1000,1000);
	Mover[2].std.MoveZ('',4.0,100,1000,1000,1000);
	nState := 14;
14:
	IF ipMover[1].std.P_MoveZ.Done 
		AND  ipMover[2].std.P_MoveZ.Done THEN
		nstate := 15;
	END_IF		
	
	
15:
	ipMover[1].std.MoveToPosition('',startpos[1],2000,20000,20000,2000000);
	ipMover[2].std.MoveToPosition('',startpos[2],2000,20000,20000,2000000);	

	nstate := 16;

16:
	   Mover[1].Swivel.StartMovement(5,250);
	   Mover[2].Shake.StartMovement(10,500);
	   nstate := 17;
	 
17:
		IF	  mover[1].Swivel.P_Return.Done 
			AND mover[2].Shake.P_Return.Done THEN
			
		
			Mover[2].std.MoveZ('',2.0,100,1000,1000,1000);
	 		nstate := 20;
	 END_IF


20:
	IF ipMover[1].std.P_MoveToPosition.Done 
		AND ipMover[2].std.P_MoveToPosition.Done THEN
		nStateP_Eight := 1;
		nstate := 21;
	END_IF		

21:
	IF 	nStateP_Eight = 0 THEN
		nstate := 30;
	END_IF
	
30:
	nStateP_Rotation := 1;
	nstate := 31;
31:
	IF 	nStateP_Rotation = 0 THEN
		nstate := 40;
	END_IF
	
	
40:

	nStateP_Tilt := 1;
	nstate := 41;
	
41:
	IF nStateP_Tilt = 0 THEN
		nstate := 100;
	END_IF

	





100:
IF IbSwitch THEN
	nstate := 15;
ELSE
	nstate :=  -10;
END_IF
	

	
END_CASE
	// Eight
	CASE 	nStateP_Eight OF
		
	1:
		StartPosEight[1].SetValuesXYC(60,60,0);
		StartPosEight[2].SetValuesXYC(180,180,0);
		nStateP_Eight := 2;
	2:
		ipMover[1].std.MoveToPosition('',StartPosEight[1],2000,20000,20000,2000000);
		ipMover[2].std.MoveToPosition('',StartPosEight[2],2000,20000,20000,2000000);	
	
		nStateP_Eight := 3;
	3:
		IF ipMover[1].std.P_MoveToPosition.Done 	
			AND ipMover[2].std.P_MoveToPosition.Done THEN
			nStateP_Eight := 10;
		END_IF		
		
		
	10:
		nCntEights := 0;
		ipMover[1].std.JoinTrack('',track8,1000,3000,10000,0);
		ipMover[2].std.JoinTrack('',track8,1000,3000,10000,0);
		nStateP_Eight := 12;
	
	12:
		IF ipMover[1].std.P_JoinTrack.Done 
			AND ipMover[2].std.P_JoinTrack.Done THEN
			nStateP_Eight := 13;
		END_IF
		
	13:
		 ipMover[1].std.MoveOnTrack('',track8,864 +(5*fTrackLength),fSpeedEight,5000,500000,30,Tc3_Mc3PlanarMotion.MC_DIRECTION.mcDirectionNonModulo);
		 ipMover[2].std.MoveOnTrack('',track8,651+(5*fTrackLength),fSpeedEight,5000,500000,30,Tc3_Mc3PlanarMotion.MC_DIRECTION.mcDirectionNonModulo);
		nStateP_Eight := 14;
		

		14:
		IF ipMover[1].std.P_MoveOnTrack.Done 	
			AND ipMover[2].std.P_MoveOnTrack.Done THEN
			nStateP_Eight := 20;
		END_IF		
		
		20:
		ipMover[1].std.LeaveTrack('',StartPosEight[1],1000,5000,5000,50000,0);
		ipMover[2].std.LeaveTrack('',StartPosEight[2],1000,5000,5000,50000,0);	
		nStateP_Eight := 21;
	
		21:
		IF ipMover[1].std.P_LeaveTrack.Done 
			AND ipMover[2].std.P_LeaveTrack.Done  THEN
			nStateP_Eight := 30;
		END_IF
		
		
		
		
	30:
		StartPosEight[1].SetValuesXYC(60,480-60,0);
		StartPosEight[2].SetValuesXYC(180,60,0);

		nStateP_Eight := 31;
	31:
		ipMover[1].std.MoveToPosition('',StartPosEight[1],2000,20000,20000,2000000);
		ipMover[2].std.MoveToPosition('',StartPosEight[2],2000,20000,20000,2000000);	
	
		nStateP_Eight := 32;
	32:
		IF ipMover[1].std.P_MoveToPosition.Done 	
			AND ipMover[2].std.P_MoveToPosition.Done THEN
			nStateP_Eight := 35;
		END_IF		
		

	35:	
		StartPosEight[1].SetValuesXYC(60,60,0);
		StartPosEight[2].SetValuesXYC(180,480-60,0);

		nStateP_Eight := 36;
	36:
		ipMover[1].std.MoveToPosition('',StartPosEight[1],2000,20000,20000,2000000);
		ipMover[2].std.MoveToPosition('',StartPosEight[2],2000,20000,20000,2000000);	
	
		nStateP_Eight := 37;
	37:
		IF ipMover[1].std.P_MoveToPosition.Done 	
			AND ipMover[2].std.P_MoveToPosition.Done THEN
			
			nCntEights := nCntEights +1;
			nStateP_Eight := 40;
		END_IF	
	40:
		IF nCntEights >= 5 THEN
			nStateP_Eight := 50;
		ELSE
			nStateP_Eight := 30;
		END_IF

	50:
		StartPosEight[1].SetValuesXYC(180,60,0);
		StartPosEight[2].SetValuesXYC(60,480-60,0);
		ipMover[1].std.MoveToPosition('',StartPosEight[1],2000,20000,20000,2000000);
		ipMover[2].std.MoveToPosition('',StartPosEight[2],2000,20000,20000,2000000);	
	
		nStateP_Eight := 51;
	51:
		IF ipMover[1].std.P_MoveToPosition.Done 	
			AND ipMover[2].std.P_MoveToPosition.Done THEN
					nStateP_Eight := 52;
		END_IF
			
			
	52:
		_ipMover[1] := ipMover[1];
		_ipMover[2] := ipMover[2];
		
		ipMover[1] := _ipMover[2];
		ipMover[2] := _ipMover[1];

		nStateP_Eight := 55;

	55:
		IF nCntEights >= 10 THEN
			nStateP_Eight := 60;
		ELSE
			nStateP_Eight := 30;
		END_IF

	60:
		_ipMover[1] := ipMover[1];
		_ipMover[2] := ipMover[2];
		
		ipMover[1] := _ipMover[2];
		ipMover[2] := _ipMover[1];

		nStateP_Eight := 90;

	90:
	
		ipMover[1].std.MoveToPosition('',startpos[1],2000,20000,20000,2000000);
		ipMover[2].std.MoveToPosition('',startpos[2],2000,20000,20000,2000000);	
	
		nStateP_Eight := 91;
	91:
		IF ipMover[1].std.P_MoveToPosition.Done 
			AND ipMover[2].std.P_MoveToPosition.Done THEN
			nStateP_Eight := 0;
		END_IF	
	END_CASE

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	// ROTATION
	CASE 	nStateP_Rotation OF
		
	1:
	
		StartPos[1].SetValuesXYC(120,120,0);
		StartPos[2].SetValuesXYC(120,360,0);
		fCTargetPos := 10;
		ipmover[1].std.MoveToPosition('',startpos[1],2000,20000,20000,2000000);
		ipmover[2].std.MoveToPosition('',startpos[2],2000,20000,20000,2000000);
		nStateP_Rotation := 2;
	2:
		IF ipmover[1].std.P_MoveToPosition.Done
			AND ipmover[2].std.P_MoveToPosition.Done THEN
			nStateP_Rotation := 10;
		END_IF
	10:
		stMoveCOptions.additionalTurns := 0;
		stMoveCOptions.direction := Tc3_Mc3PlanarMotion.  MC_DIRECTION.mcDirectionNegative;
		ipmover[1].std.MoveC('',360-fCTargetPos,360*(fCTargetPos/5),500,500,1000,stMoveCOptions);
		stMoveCOptions2.additionalTurns := 0;
		stMoveCOptions2.direction := Tc3_Mc3PlanarMotion.MC_DIRECTION.mcDirectionPositive;
		ipmover[2].std.MoveC('',fCTargetPos,360*(fCTargetPos/5),500,500,1000,stMoveCOptions2);
		nStateP_Rotation := 11;
	11:
		IF ipmover[1].std.P_MoveC.Done 
			AND ipmover[2].std.P_MoveC.Done THEN
		
				nStateP_Rotation := 15;
			END_IF

	15:
		stMoveCOptions.additionalTurns := 0;
		stMoveCOptions.direction := Tc3_Mc3PlanarMotion.MC_DIRECTION.mcDirectionPositive;
		ipmover[1].std.MoveC('',fCTargetPos,360*(fCTargetPos/5),500,500,1000,stMoveCOptions);
		stMoveCOptions2.additionalTurns := 0;
		stMoveCOptions2.direction := Tc3_Mc3PlanarMotion.MC_DIRECTION.mcDirectionNegative;		
		ipmover[2].std.MoveC('',360-fCTargetPos,360*(fCTargetPos/5),500,500,1000,stMoveCOptions2);
		nStateP_Rotation := 16;
	16:
		IF ipmover[1].std.P_MoveC.Done THEN
				fCTargetPos := fCTargetPos + 30;
				nStateP_Rotation := 20;
		END_IF

		IF 	fCTargetPos >= 160 THEN
			nStateP_Rotation := 30;
		END_IF

	20:
		IF 	fCTargetPos > 180 THEN
			nStateP_Rotation := 30;
		ELSE
			nStateP_Rotation := 10;
		END_IF
		
		
	30:
		stMoveCOptions.additionalTurns := 30;
		stMoveCOptions2.additionalTurns := 30;
		stMoveCOptions.direction := Tc3_Mc3PlanarMotion.MC_DIRECTION.mcDirectionNegative;
		stMoveCOptions2.direction := Tc3_Mc3PlanarMotion.MC_DIRECTION.mcDirectionPositive;
		ipmover[1].std.MoveC('',0,8*360,1000,100000,100000,stMoveCOptions);
		ipmover[2].std.MoveC('',0,8*360,1000,100000,100000,stMoveCOptions2);
		nStateP_Rotation := 31;
		
	31:
			IF ipmover[1].std.P_MoveC.Done
				AND ipmover[1].std.P_MoveC.Done THEN
				
				nStateP_Rotation := 0;
			END_IF	
			
		
	END_CASE

(*
	// PRINTER
	CASE nStateP_Print OF	
		
	0:
	
	1:
		nStateP_Print := 10;
		fYPos := 0;
	10:
		TargetPos.SetValuesXYC(60,60+fYPos,0);
		mover[1].std.MoveToPosition('',targetpos,2000,20000,20000,2000000);
		nStateP_Print := 11;
	
		
	11:	
		IF mover[1].std.P_MoveToPosition.Done THEN
			nStateP_Print := 12;
		END_IF
		
	12:
		TargetPos.SetValuesXYC(420,60+fYPos,0);
		mover[1].std.MoveToPosition('',targetpos,2000,20000,20000,2000000);
		nStateP_Print := 13;
	
		
	13:	
		IF mover[1].std.P_MoveToPosition.Done THEN
			fYPos := fYPos+1;
			nStateP_Print := 14;
		END_IF	
		
	14:
		TargetPos.SetValuesXYC(420,60+fYPos,0);
		mover[1].std.MoveToPosition('',targetpos,2000,20000,20000,2000000);
		nStateP_Print := 15;
	15:
		IF mover[1].std.P_MoveToPosition.Done THEN
			fYPos := fYPos+5;
			nStateP_Print := 16;
		END_IF		
	16:
		IF fYPos > 120 THEN
			nStateP_Print := 20;
		ELSE
			nStateP_Print := 10;
		END_IF
	20:
		mover[1].std.MoveToPosition('',startpos[1],2000,20000,20000,2000000);
		nStateP_Print := 21;
	21:
		IF mover[1].std.P_MoveToPosition.Done THEN
			nStateP_Print := 0;
		END_IF
	
	END_CASE	

*)
	
	
	
CASE nStateP_Tilt	OF
	


1:
	ipMover[1].std.MoveZ('',5.0,1000,2000,2000,20000);
	ipMover[2].std.MoveZ('',5.0,1000,2000,2000,20000);
	nStateP_Tilt := 2;

2:	
	IF ipMover[1].std.P_MoveZ.Done 
			AND ipMover[2].std.P_MoveZ.Done THEN
			nStateP_Tilt := 5;
	END_IF	
	
	
5:
	ipMover[1].std.Movea('',2.5,1000,2000,2000,20000);
	ipMover[2].std.Movea('',-2.5,1000,2000,2000,20000);
	nStateP_Tilt := 6;

6: 
	IF ipMover[1].std.P_Movea.Done 
			AND ipMover[2].std.P_Movea.Done THEN
			nStateP_Tilt := 10;
	END_IF		
10:
	ipMover[1].std.Movea('',-2,1000,2000,2000,20000);
	ipMover[2].std.Movea('',2,1000,2000,2000,20000);
	
	ipMover[1].std.Moveb('',2,1000,2000,2000,20000);
	ipMover[2].std.Moveb('',-2,1000,2000,2000,20000);
	nStateP_Tilt := 11;

11:
	IF ipMover[1].std.P_Movea.Done 
			AND ipMover[2].std.P_Movea.Done THEN
			nStateP_Tilt := 15;
	END_IF	
15:
	//ipMover[1].std.Movea('',3,1000,2000,2000,20000);
	//ipMover[2].std.Movea('',-3,1000,2000,2000,20000);
	
	ipMover[1].std.Moveb('',-2,1000,2000,2000,20000);
	ipMover[2].std.Moveb('',2,1000,2000,2000,20000);
	
	nStateP_Tilt := 20;	
20:	
	IF ipMover[1].std.P_Moveb.Done 
			AND ipMover[2].std.P_Moveb.Done THEN
			nStateP_Tilt := 25;
	END_IF	

25:	
	ipMover[1].std.Movea('',0,1000,2000,2000,20000);
	ipMover[2].std.Movea('',0,1000,2000,2000,20000);
	nStateP_Tilt := 26;
26:
	IF ipMover[1].std.P_Movea.Done 
			AND ipMover[2].std.P_Movea.Done THEN
			nStateP_Tilt := 27;
	END_IF

27:
	ipMover[1].std.Moveb('',0,1000,2000,2000,20000);
	ipMover[2].std.Moveb('',0,1000,2000,2000,20000);	

	nStateP_Tilt := 28;
	
28:
	IF ipMover[1].std.P_Moveb.Done 
			AND ipMover[2].std.P_Moveb.Done THEN
			nStateP_Tilt := 30;
	END_IF

	
30:			
	ipMover[1].std.MoveZ('',2.0,1000,2000,2000,20000);
	ipMover[2].std.MoveZ('',2.0,1000,2000,2000,20000);		
			nStateP_Tilt := nStateP_Tilt +1;

31:
	IF ipMover[1].std.P_MoveZ.Done 
			AND ipMover[2].std.P_MoveZ.Done THEN
			nStateP_Tilt := 0;
	END_IF	
	
END_CASE
	
	
	
	
	
	
	
	
	
	
	
	
	

CASE nStateInitXpu OF
0: // init environment
		IF fbEnvironment.Init(TRUE) THEN
			fbEnvironment.Init(FALSE);
			nStateInitXpu:=1;
		END_IF

1: // init Visu
	fbXPlanarUtilityVisu.Environment := fbEnvironment;
	nStateInitXpu := 3;	

3:
	ipXpu := fbEnvironment.XpuTcIo(1);
	nStateInitXpu := 4;
	
ELSE // call Visu
	fbXPlanarUtilityVisu.Cycle();
END_CASE

IF nStateInitXpu <> 4 THEN
RETURN;
END_IF

(*
fbWriteLog(sPath:='c:\templog\log.txt' , bErrorAcknowledge:= );


tonTimer(IN:= , PT:=T#60S , Q=> , ET=> );

CASE nstatelog OF
	
0:
tonTimer(IN:=TRUE);
	IF tonTimer.Q THEN
		nstatelog := 1;
	END_IF

1:
IF ipXpu.TileCoE(1,1).DiagData.Update() THEN
	TilePower := LREAL_TO_UINT(ipXpu.TileTcIo(1,1).GetObservedTilePower());
	stDiagData.TemperatureCenter := ipXpu.TileCoE(1,1).DiagData.TemperatureCenter;
	stDiagData.TemperatureNorth := ipXpu.TileCoE(1,1).DiagData.TemperatureNorth;
	stDiagData.TemperatureEast := ipXpu.TileCoE(1,1).DiagData.TemperatureEast;
	stDiagData.TemperatureSouth := ipXpu.TileCoE(1,1).DiagData.TemperatureSouth;
	stDiagData.TemperatureWest := ipXpu.TileCoE(1,1).DiagData.TemperatureWest;
	nstatelog := 0;
	tonTimer(IN:=FALSE);
	fbWriteLog.M_AddLogg(CONCAT(UINT_TO_STRING(stDiagData.TemperatureCenter),CONCAT(';',CONCAT(UINT_TO_STRING(stDiagData.TemperatureNorth),CONCAT(';',CONCAT(UINT_TO_STRING(stDiagData.TemperatureEast),CONCAT(';',CONCAT(UINT_TO_STRING(stDiagData.TemperatureSouth),CONCAT(';',CONCAT(UINT_TO_STRING(stDiagData.TemperatureWest),CONCAT(';',UINT_TO_STRING(TilePower))))))))))));


END_IF

END_CASE

*)






CASE nStateTrackInit OF
	
0:
	track8.Reset();
	
	pstart REF= start;
	pend REF= end;
	pposition REF= position;
	
	nStateTrackInit := 1;
1:
	IF track8.P_Reset.done THEN
		nStateTrackInit := 2;
	END_IF
2:
	start.SetValuesXYC(120-20,240-1,0);
	end.SetValuesXYC(120+20,240+1,0);
	track8.AppendLine(start,end);

	pposition.SetValuesXYC(180,300,0);
//	track8.AppendPoint(pposition);
	
	// rechts oben
	start.SetValuesXYC(240-60,360-1,0);
	end.SetValuesXYC(240-60,360+20,0);	
	track8.AppendLine(start,end);
	
	pposition.SetValuesXYC(420,420,0);
//	track8.AppendPoint(pposition);

	// rechts mitte
	start.SetValuesXYC(120+1,480-60,0);
	end.SetValuesXYC(120-1,480-60,0);	
	track8.AppendLine(start,end);
	
	pposition.SetValuesXYC(60,420,0);
//	track8.AppendPoint(pposition);
	
	// rechts unten
	start.SetValuesXYC(60,360+20,0);
	end.SetValuesXYC(60,360-1,0);	
	track8.AppendLine(start,end);	
	
	pposition.SetValuesXYC(60,300,0);
//	track8.AppendPoint(pposition);

	// kreuz von rechts unten nach links oben
	start.SetValuesXYC(120-20,240+1,0);
	end.SetValuesXYC(120+20,240-1,0);
	track8.AppendLine(start,end);	
	
//	pposition.SetValuesXYC(180,180,0);
//	track8.AppendPoint(pposition);
	
	// links oben
	start.SetValuesXYC(240-60,120+1,0);
	end.SetValuesXYC(240-60,120-20,0);	
	track8.AppendLine(start,end);

	pposition.SetValuesXYC(180,60,0);
//	track8.AppendPoint(pposition);
	
	// libks mitte
	start.SetValuesXYC(120+1,60,0);
	end.SetValuesXYC(120-1,60,0);	
	track8.AppendLine(start,end);
	
	pposition.SetValuesXYC(60,60,0);
//	track8.AppendPoint(pposition);
	
	//links unten
	start.SetValuesXYC(60,120-20,0);
	end.SetValuesXYC(60,120+1,0);	
	track8.AppendLine(start,end);
	
	pposition.SetValuesXYC(60,180,0);
//	track8.AppendPoint(pposition);

	track8.CloseLoop();
	nStateTrackInit := 3;
3:
	IF track8.P_CloseLoop.Done THEN
		nStateTrackInit := 4;
	END_IF
4:
	Track8.Enable();
	nStateTrackInit := 5;
5:
	IF Track8.P_Enable.Done THEN
		nStateTrackInit := 6;
	END_IF
END_CASE
track8.Cycle();




fTrackLength := track8.GetLength();

track8.GetMoverPositionAt(fTrackPos,_Position);
fPosX := _Position.x;
fPosY := _Position.y;

fTrackPos := fTrackPos +1;
IF fTrackPos >= fTrackLength THEN
	fTrackPos := 1;
END_IF




]]></ST>
    </Implementation>
    <Action Name="actShutdown" Id="{997d0fba-6457-419b-9a1d-cdf3d28cd5cf}">
      <Implementation>
        <ST><![CDATA[//act Shutdown

	IF TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].FirstCycle
		AND IbSwitchRestart
	THEN
		bStartShutdown	:= TRUE;
	END_IF

	fbDelay(
		IN := IbSwitchRestart,
		PT := tDelay);
		
	fbShutdown(
		START := fbDelay.Q);	



//End]]></ST>
      </Implementation>
    </Action>
    <Method Name="Shutdown" Id="{6d9f8433-e2be-4756-8e24-430d85aab6f0}">
      <Declaration><![CDATA[METHOD Shutdown : BOOL
VAR_INPUT
	bExecute		:BOOL;
END_VAR
VAR_INST


END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// mShutdown




//End]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MAIN">
      <LineId Id="590" Count="1" />
      <LineId Id="1272" Count="0" />
      <LineId Id="1466" Count="0" />
      <LineId Id="1465" Count="0" />
      <LineId Id="1468" Count="3" />
      <LineId Id="1459" Count="1" />
      <LineId Id="1274" Count="6" />
      <LineId Id="1273" Count="0" />
      <LineId Id="592" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="1286" Count="0" />
      <LineId Id="1288" Count="8" />
      <LineId Id="1287" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="498" Count="0" />
      <LineId Id="595" Count="0" />
      <LineId Id="499" Count="2" />
      <LineId Id="596" Count="0" />
      <LineId Id="502" Count="1" />
      <LineId Id="15" Count="1" />
      <LineId Id="1281" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="1282" Count="0" />
      <LineId Id="580" Count="0" />
      <LineId Id="582" Count="0" />
      <LineId Id="581" Count="0" />
      <LineId Id="512" Count="0" />
      <LineId Id="583" Count="0" />
      <LineId Id="587" Count="0" />
      <LineId Id="589" Count="0" />
      <LineId Id="588" Count="0" />
      <LineId Id="585" Count="1" />
      <LineId Id="584" Count="0" />
      <LineId Id="513" Count="0" />
      <LineId Id="516" Count="0" />
      <LineId Id="519" Count="0" />
      <LineId Id="523" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="524" Count="0" />
      <LineId Id="521" Count="0" />
      <LineId Id="518" Count="0" />
      <LineId Id="515" Count="0" />
      <LineId Id="514" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="3" />
      <LineId Id="27" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="593" Count="0" />
      <LineId Id="63" Count="3" />
      <LineId Id="594" Count="0" />
      <LineId Id="67" Count="1" />
      <LineId Id="60" Count="0" />
      <LineId Id="78" Count="2" />
      <LineId Id="597" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="1271" Count="0" />
      <LineId Id="923" Count="0" />
      <LineId Id="927" Count="0" />
      <LineId Id="1186" Count="0" />
      <LineId Id="934" Count="0" />
      <LineId Id="930" Count="0" />
      <LineId Id="933" Count="0" />
      <LineId Id="928" Count="0" />
      <LineId Id="1190" Count="0" />
      <LineId Id="1187" Count="0" />
      <LineId Id="1189" Count="0" />
      <LineId Id="1188" Count="0" />
      <LineId Id="929" Count="0" />
      <LineId Id="926" Count="0" />
      <LineId Id="924" Count="1" />
      <LineId Id="188" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="662" Count="0" />
      <LineId Id="905" Count="0" />
      <LineId Id="191" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="906" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="910" Count="2" />
      <LineId Id="907" Count="1" />
      <LineId Id="914" Count="0" />
      <LineId Id="922" Count="0" />
      <LineId Id="916" Count="2" />
      <LineId Id="915" Count="0" />
      <LineId Id="913" Count="0" />
      <LineId Id="909" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="1046" Count="1" />
      <LineId Id="1095" Count="0" />
      <LineId Id="1103" Count="1" />
      <LineId Id="1107" Count="2" />
      <LineId Id="1106" Count="0" />
      <LineId Id="1105" Count="0" />
      <LineId Id="1097" Count="5" />
      <LineId Id="1283" Count="0" />
      <LineId Id="1096" Count="0" />
      <LineId Id="1284" Count="1" />
      <LineId Id="896" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="655" Count="0" />
      <LineId Id="657" Count="1" />
      <LineId Id="656" Count="0" />
      <LineId Id="663" Count="0" />
      <LineId Id="668" Count="7" />
      <LineId Id="666" Count="0" />
      <LineId Id="664" Count="1" />
      <LineId Id="401" Count="0" />
      <LineId Id="477" Count="0" />
      <LineId Id="405" Count="0" />
      <LineId Id="659" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="402" Count="1" />
      <LineId Id="417" Count="0" />
      <LineId Id="660" Count="0" />
      <LineId Id="418" Count="0" />
      <LineId Id="416" Count="0" />
      <LineId Id="419" Count="1" />
      <LineId Id="449" Count="0" />
      <LineId Id="661" Count="0" />
      <LineId Id="404" Count="0" />
      <LineId Id="450" Count="0" />
      <LineId Id="781" Count="0" />
      <LineId Id="780" Count="0" />
      <LineId Id="784" Count="2" />
      <LineId Id="783" Count="0" />
      <LineId Id="782" Count="0" />
      <LineId Id="458" Count="0" />
      <LineId Id="480" Count="0" />
      <LineId Id="778" Count="0" />
      <LineId Id="481" Count="3" />
      <LineId Id="779" Count="0" />
      <LineId Id="485" Count="0" />
      <LineId Id="479" Count="0" />
      <LineId Id="807" Count="3" />
      <LineId Id="814" Count="0" />
      <LineId Id="861" Count="0" />
      <LineId Id="860" Count="0" />
      <LineId Id="815" Count="10" />
      <LineId Id="811" Count="0" />
      <LineId Id="826" Count="0" />
      <LineId Id="841" Count="0" />
      <LineId Id="840" Count="0" />
      <LineId Id="862" Count="0" />
      <LineId Id="839" Count="0" />
      <LineId Id="827" Count="9" />
      <LineId Id="842" Count="1" />
      <LineId Id="837" Count="0" />
      <LineId Id="812" Count="1" />
      <LineId Id="844" Count="1" />
      <LineId Id="847" Count="1" />
      <LineId Id="846" Count="0" />
      <LineId Id="935" Count="0" />
      <LineId Id="945" Count="0" />
      <LineId Id="952" Count="1" />
      <LineId Id="946" Count="5" />
      <LineId Id="936" Count="0" />
      <LineId Id="957" Count="1" />
      <LineId Id="954" Count="1" />
      <LineId Id="959" Count="0" />
      <LineId Id="956" Count="0" />
      <LineId Id="937" Count="0" />
      <LineId Id="962" Count="2" />
      <LineId Id="938" Count="2" />
      <LineId Id="1032" Count="4" />
      <LineId Id="941" Count="1" />
      <LineId Id="1037" Count="6" />
      <LineId Id="943" Count="1" />
      <LineId Id="459" Count="0" />
      <LineId Id="850" Count="8" />
      <LineId Id="849" Count="0" />
      <LineId Id="400" Count="0" />
      <LineId Id="787" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="788" Count="18" />
      <LineId Id="151" Count="1" />
      <LineId Id="156" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="919" Count="2" />
      <LineId Id="177" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="863" Count="0" />
      <LineId Id="162" Count="2" />
      <LineId Id="864" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="1182" Count="1" />
      <LineId Id="865" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="866" Count="0" />
      <LineId Id="508" Count="1" />
      <LineId Id="506" Count="0" />
      <LineId Id="870" Count="4" />
      <LineId Id="1185" Count="0" />
      <LineId Id="1184" Count="0" />
      <LineId Id="875" Count="3" />
      <LineId Id="880" Count="1" />
      <LineId Id="869" Count="0" />
      <LineId Id="1192" Count="2" />
      <LineId Id="1191" Count="0" />
      <LineId Id="883" Count="0" />
      <LineId Id="882" Count="0" />
      <LineId Id="884" Count="1" />
      <LineId Id="887" Count="1" />
      <LineId Id="886" Count="0" />
      <LineId Id="889" Count="2" />
      <LineId Id="893" Count="0" />
      <LineId Id="904" Count="0" />
      <LineId Id="894" Count="0" />
      <LineId Id="903" Count="0" />
      <LineId Id="895" Count="0" />
      <LineId Id="892" Count="0" />
      <LineId Id="867" Count="0" />
      <LineId Id="1048" Count="1" />
      <LineId Id="1051" Count="0" />
      <LineId Id="1054" Count="0" />
      <LineId Id="1052" Count="1" />
      <LineId Id="1050" Count="0" />
      <LineId Id="868" Count="0" />
      <LineId Id="154" Count="1" />
      <LineId Id="153" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="86" Count="6" />
      <LineId Id="122" Count="0" />
      <LineId Id="93" Count="21" />
      <LineId Id="123" Count="1" />
      <LineId Id="126" Count="1" />
      <LineId Id="125" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="130" Count="2" />
      <LineId Id="129" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="145" Count="1" />
      <LineId Id="119" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="139" Count="4" />
      <LineId Id="138" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="1058" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="1059" Count="2" />
      <LineId Id="1075" Count="0" />
      <LineId Id="1078" Count="2" />
      <LineId Id="1083" Count="0" />
      <LineId Id="1081" Count="0" />
      <LineId Id="1084" Count="0" />
      <LineId Id="1087" Count="0" />
      <LineId Id="1082" Count="0" />
      <LineId Id="1088" Count="2" />
      <LineId Id="1085" Count="1" />
      <LineId Id="1093" Count="1" />
      <LineId Id="1110" Count="0" />
      <LineId Id="1091" Count="0" />
      <LineId Id="1077" Count="0" />
      <LineId Id="1119" Count="0" />
      <LineId Id="1111" Count="0" />
      <LineId Id="1121" Count="2" />
      <LineId Id="1120" Count="0" />
      <LineId Id="1113" Count="5" />
      <LineId Id="1112" Count="0" />
      <LineId Id="1126" Count="1" />
      <LineId Id="1130" Count="0" />
      <LineId Id="1128" Count="1" />
      <LineId Id="1124" Count="1" />
      <LineId Id="1132" Count="5" />
      <LineId Id="1131" Count="0" />
      <LineId Id="1092" Count="0" />
      <LineId Id="1140" Count="2" />
      <LineId Id="1138" Count="0" />
      <LineId Id="1144" Count="0" />
      <LineId Id="1143" Count="0" />
      <LineId Id="1145" Count="1" />
      <LineId Id="1173" Count="0" />
      <LineId Id="1170" Count="0" />
      <LineId Id="1174" Count="0" />
      <LineId Id="1171" Count="1" />
      <LineId Id="1165" Count="1" />
      <LineId Id="1147" Count="1" />
      <LineId Id="1139" Count="0" />
      <LineId Id="1149" Count="0" />
      <LineId Id="1152" Count="0" />
      <LineId Id="1175" Count="1" />
      <LineId Id="1179" Count="2" />
      <LineId Id="1178" Count="0" />
      <LineId Id="1177" Count="0" />
      <LineId Id="1155" Count="1" />
      <LineId Id="1163" Count="1" />
      <LineId Id="1161" Count="0" />
      <LineId Id="1372" Count="0" />
      <LineId Id="1157" Count="0" />
      <LineId Id="1374" Count="2" />
      <LineId Id="1373" Count="0" />
      <LineId Id="1153" Count="0" />
      <LineId Id="1076" Count="0" />
      <LineId Id="1062" Count="12" />
      <LineId Id="243" Count="0" />
      <LineId Id="225" Count="17" />
      <LineId Id="267" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="268" Count="1" />
      <LineId Id="273" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="247" Count="3" />
      <LineId Id="246" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="258" Count="2" />
      <LineId Id="255" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="261" Count="0" />
      <LineId Id="274" Count="3" />
      <LineId Id="264" Count="1" />
      <LineId Id="278" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="330" Count="8" />
      <LineId Id="349" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="442" Count="1" />
      <LineId Id="411" Count="0" />
      <LineId Id="414" Count="1" />
      <LineId Id="447" Count="1" />
      <LineId Id="412" Count="1" />
      <LineId Id="446" Count="0" />
      <LineId Id="445" Count="0" />
      <LineId Id="358" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="359" Count="1" />
      <LineId Id="749" Count="0" />
      <LineId Id="436" Count="0" />
      <LineId Id="751" Count="0" />
      <LineId Id="750" Count="0" />
      <LineId Id="362" Count="0" />
      <LineId Id="427" Count="1" />
      <LineId Id="354" Count="0" />
      <LineId Id="752" Count="2" />
      <LineId Id="437" Count="0" />
      <LineId Id="422" Count="1" />
      <LineId Id="365" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="363" Count="0" />
      <LineId Id="755" Count="0" />
      <LineId Id="757" Count="0" />
      <LineId Id="756" Count="0" />
      <LineId Id="438" Count="0" />
      <LineId Id="429" Count="1" />
      <LineId Id="364" Count="0" />
      <LineId Id="758" Count="2" />
      <LineId Id="439" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="372" Count="1" />
      <LineId Id="353" Count="0" />
      <LineId Id="737" Count="1" />
      <LineId Id="370" Count="0" />
      <LineId Id="739" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="431" Count="1" />
      <LineId Id="378" Count="0" />
      <LineId Id="740" Count="0" />
      <LineId Id="440" Count="0" />
      <LineId Id="742" Count="0" />
      <LineId Id="741" Count="0" />
      <LineId Id="379" Count="0" />
      <LineId Id="424" Count="1" />
      <LineId Id="381" Count="0" />
      <LineId Id="743" Count="2" />
      <LineId Id="375" Count="0" />
      <LineId Id="441" Count="0" />
      <LineId Id="434" Count="1" />
      <LineId Id="433" Count="0" />
      <LineId Id="746" Count="2" />
      <LineId Id="384" Count="0" />
      <LineId Id="376" Count="0" />
      <LineId Id="387" Count="4" />
      <LineId Id="371" Count="0" />
      <LineId Id="392" Count="4" />
      <LineId Id="351" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="339" Count="5" />
      <LineId Id="770" Count="0" />
      <LineId Id="769" Count="0" />
      <LineId Id="772" Count="1" />
      <LineId Id="768" Count="0" />
      <LineId Id="767" Count="0" />
      <LineId Id="774" Count="2" />
      <LineId Id="345" Count="3" />
      <LineId Id="329" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.actShutdown">
      <LineId Id="1" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="15" Count="3" />
      <LineId Id="14" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="7" Count="5" />
      <LineId Id="4" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.Shutdown">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="6" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>